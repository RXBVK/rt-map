{"version":3,"sources":["components/CsvUploader/CsvUploader.js","components/ColumnsPicker/ColumnsPicker.js","components/Map/Map.js","components/FindPositions/FindPositions.js","App.js","reportWebVitals.js","index.js"],"names":["CsvUploader","props","useState","fileTooBig","setFileTooBig","handleFileUpload","file","reader","FileReader","addEventListener","lineEnd","String","fromCharCode","rows","result","split","splittedRows","map","row","console","log","length","setUploadedRows","readAsText","className","onDrop","e","preventDefault","stopPropagation","dataTransfer","files","handleDropZone","onDragOver","htmlFor","type","id","accept","onChange","target","style","color","fontWeight","ColumnsPicker","columnOrder","setColumnOrder","onClick","properData","uploadedRows","setDataFromRows","connectColumnsToData","column","value","opacity","pointerEvents","toUpperCase","MapComponent","dataWithCoords","counter","width","height","WrappedMap","googleMapURL","process","loadingElement","containerElement","mapElement","withScriptjs","withGoogleMap","defaultZoom","defaultCenter","lat","lng","address","position","category","FindPositions","useEffect","a","i","dataFromRows","axios","get","params","city","state","zip","key","response","data","results","location","geometry","push","setAddressesFetched","setDataWithCoords","getPositions","styles","animation","App","addressesFetched","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9a051a98.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./styles/csv-uploader.css\";\r\n\r\nexport default function CsvUploader(props) {\r\n  const [fileTooBig, setFileTooBig] = useState(false);\r\n  const handleFileUpload = (file) => {\r\n    let reader = new FileReader();\r\n    reader.addEventListener(\"load\", () => {\r\n      const lineEnd = `${String.fromCharCode(13)}${String.fromCharCode(10)}`;\r\n      const separator = \",\";\r\n      let result = reader.result;\r\n      let rows = result.split(lineEnd);\r\n      let splittedRows = rows.map((row) => row.split(separator));\r\n      console.log(rows);\r\n      console.log(splittedRows);\r\n      if (splittedRows.length > 20) {\r\n        setFileTooBig(true);\r\n      } else {\r\n        props.setUploadedRows(splittedRows);\r\n      }\r\n      console.log(splittedRows);\r\n    });\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  const handleDropZone = (e) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    handleFileUpload(e.dataTransfer.files[0]);\r\n  };\r\n\r\n  return (\r\n    <div className=\"csv-uploader__container\">\r\n      <div\r\n        className=\"csv-uploader__dropzone\"\r\n        onDrop={(e) => handleDropZone(e)}\r\n        onDragOver={(e) => {\r\n          e.preventDefault();\r\n        }}\r\n      >\r\n        <p>Drag and drop the file here</p>\r\n      </div>\r\n      <h1 className=\"csv-uploader__or\">OR</h1>\r\n      <label\r\n        htmlFor=\"csv-uploader__input\"\r\n        className=\"csv-uploader__label button--primary\"\r\n      >\r\n        Upload from device\r\n      </label>\r\n      <input\r\n        type=\"file\"\r\n        id=\"csv-uploader__input\"\r\n        accept=\".csv\"\r\n        onChange={(e) => handleFileUpload(e.target.files[0])}\r\n      />\r\n      {fileTooBig ? (\r\n        <h5 style={{ color: \"red\", fontWeight: \"900\" }}>\r\n          Given .CSV file has too many rows (max 20)\r\n        </h5>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"./styles/columns-picker.css\";\r\n\r\nexport default function ColumnsPicker(props) {\r\n  const columns = [\"state\", \"city\", \"zip\", \"address\", \"category\"];\r\n  const numerals = [\"first\", \"second\", \"third\", \"forth\", \"fifth\"];\r\n  const [columnOrder, setColumnOrder] = useState([]);\r\n\r\n  const handleColumnOrder = (target) => {\r\n    setColumnOrder([...columnOrder, target.value]);\r\n    target.style.opacity = \"0\";\r\n    target.style.pointerEvents = \"none\";\r\n  };\r\n\r\n  const connectColumnsToData = () => {\r\n    let properData = props.uploadedRows.map((row) => ({\r\n      [columnOrder[0]]: row[0],\r\n      [columnOrder[1]]: row[1],\r\n      [columnOrder[2]]: row[2],\r\n      [columnOrder[3]]: row[3],\r\n      [columnOrder[4]]: row[4],\r\n    }));\r\n    console.log(properData);\r\n    props.setDataFromRows(properData);\r\n  };\r\n\r\n  return (\r\n    <div className=\"columns-picker__container\">\r\n      {columnOrder.length === 5 ? (\r\n        <>\r\n          <h1>Columns defined, let's go to the map</h1>\r\n          <button\r\n            onClick={() => connectColumnsToData()}\r\n            className=\"columns-picker__ready-btn button--primary\"\r\n          >\r\n            Ready!\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h1>Set column order</h1>\r\n          <h2>\r\n            Click on the name of the {numerals[columnOrder.length]} column\r\n          </h2>\r\n          <div className=\"columns-picker__buttons\">\r\n            {columns.map((column) => {\r\n              return (\r\n                <button\r\n                  value={column}\r\n                  onClick={(e) => handleColumnOrder(e.target)}\r\n                  key={column}\r\n                >\r\n                  {column.toUpperCase()}\r\n                </button>\r\n              );\r\n            })}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  GoogleMap,\r\n  withScriptjs,\r\n  withGoogleMap,\r\n  Marker,\r\n} from \"react-google-maps\";\r\n\r\nexport default function MapComponent({ dataWithCoords, counter }) {\r\n  return (\r\n    <div className=\"map__container\" style={{ width: \"100%\", height: \"100vh\" }}>\r\n      <WrappedMap\r\n        googleMapURL={`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places&key=${process.env.REACT_APP_GOOGLE_KEY}`}\r\n        loadingElement={<div style={{ height: `100%` }} />}\r\n        containerElement={<div style={{ height: `80%` }} />}\r\n        mapElement={<div style={{ height: `100%` }} />}\r\n        dataWithCoords={dataWithCoords}\r\n      />\r\n      <h4>\r\n        {counter > 0\r\n          ? `${counter} of your address(es) cannot be located, check your .csv file`\r\n          : \"\"}\r\n      </h4>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Map({ dataWithCoords }) {\r\n  return (\r\n    <>\r\n      <GoogleMap\r\n        defaultZoom={15}\r\n        defaultCenter={{ lat: 51.113842, lng: 17.0064022 }}\r\n      >\r\n        {dataWithCoords.map((address) => (\r\n          <Marker key={address.category} position={address.position} />\r\n        ))}\r\n      </GoogleMap>\r\n    </>\r\n  );\r\n}\r\n\r\nconst WrappedMap = withScriptjs(withGoogleMap(Map));\r\n","import React, { useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default function FindPositions(props) {\r\n  useEffect(() => {\r\n    const getPositions = async () => {\r\n      let result = [];\r\n      for (let i = 0; i < props.dataFromRows.length; i++) {\r\n        let address = props.dataFromRows[i];\r\n        let response = await axios.get(\r\n          \"https://maps.googleapis.com/maps/api/geocode/json\",\r\n          {\r\n            params: {\r\n              address: `${address.address}${address.city}${address.state}${address.zip}`,\r\n              key: process.env.REACT_APP_GOOGLE_KEY,\r\n            },\r\n          }\r\n        );\r\n        if (response.data.results.length == 0) {\r\n          console.log(\"Wrong address\");\r\n        } else {\r\n          let location = response.data.results[0].geometry.location;\r\n          address = { ...address, position: location };\r\n          result.push(address);\r\n        }\r\n      }\r\n      props.setAddressesFetched(true);\r\n      props.setDataWithCoords(result);\r\n    };\r\n    getPositions();\r\n  }, []);\r\n  return (\r\n    <div\r\n      styles={{\r\n        animation: \"fadein 800ms\",\r\n      }}\r\n    >\r\n      <h1>Let me find those addresses on the map...</h1>\r\n      <h3>Wait for few seconds</h3>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport CsvUploader from \"./components/CsvUploader/CsvUploader\";\nimport ColumnsPicker from \"./components/ColumnsPicker/ColumnsPicker\";\nimport MapComponent from \"./components/Map/Map\";\nimport FindPositions from \"./components/FindPositions/FindPositions\";\nimport \"./styles/app.css\";\n\nfunction App() {\n  const [uploadedRows, setUploadedRows] = useState([]);\n  const [dataFromRows, setDataFromRows] = useState([]);\n  const [dataWithCoords, setDataWithCoords] = useState([]);\n  const [addressesFetched, setAddressesFetched] = useState(false);\n\n  if (addressesFetched) {\n    return (\n      <div className=\"main__container\">\n        <MapComponent\n          dataWithCoords={dataWithCoords}\n          counter={dataFromRows.length - dataWithCoords.length}\n        />\n      </div>\n    );\n  }\n\n  if (dataFromRows.length > 0) {\n    return (\n      <div className=\"main__container\">\n        <FindPositions\n          dataFromRows={dataFromRows}\n          setDataWithCoords={setDataWithCoords}\n          dataWithCoords={dataWithCoords}\n          setAddressesFetched={setAddressesFetched}\n        />\n      </div>\n    );\n  }\n\n  if (uploadedRows.length > 0) {\n    return (\n      <div className=\"main__container\">\n        <ColumnsPicker\n          uploadedRows={uploadedRows}\n          setDataFromRows={setDataFromRows}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"main__container\">\n      <CsvUploader setUploadedRows={setUploadedRows} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}